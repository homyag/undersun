from django.contrib import admin
from django.contrib import messages
from django.http import HttpResponseRedirect
from django import forms
from django.forms import ModelForm
from django.utils.html import format_html
from tinymce.widgets import TinyMCE
# from modeltranslation.admin import TranslationAdmin
from .models import (
    Property, PropertyImage, PropertyType, Developer,
    PropertyFeature, PropertyFeatureRelation
)
from .services import translate_property, translate_property_type, translate_developer, translate_property_feature
from .widgets import BulkImageUploadWidget


class BaseAdminWithRequiredFields(admin.ModelAdmin):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º —Å—Ç–∏–ª–µ–π –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π"""
    
    class Media:
        css = {
            'all': ('admin/css/required_fields.css',)
        }
        js = ('admin/js/required_fields.js',)
    
    def formfield_for_dbfield(self, db_field, request, **kwargs):
        """–î–æ–±–∞–≤–ª—è–µ–º CSS –∫–ª–∞—Å—Å 'required' –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π"""
        formfield = super().formfield_for_dbfield(db_field, request, **kwargs)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º
        if formfield and not db_field.blank and not db_field.null:
            if hasattr(formfield.widget, 'attrs'):
                formfield.widget.attrs['class'] = formfield.widget.attrs.get('class', '') + ' required-field'
        
        return formfield


class PropertyImageInline(admin.TabularInline):
    model = PropertyImage
    extra = 1
    fields = ('drag_handle', 'image_preview', 'image', 'title', 'is_main', 'order')
    readonly_fields = ('drag_handle', 'image_preview')
    
    class Media:
        css = {
            'all': ('admin/css/sortable_images.css',)
        }
        js = ('https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js', 'admin/js/sortable_images.js')
    
    def drag_handle(self, obj):
        """–†—É—á–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è"""
        return format_html(
            '<span class="drag-handle" style="cursor: grab; font-size: 18px; color: #666; user-select: none;">‚ãÆ‚ãÆ</span>'
        )
    drag_handle.short_description = '‚ÜïÔ∏è'
    
    def image_preview(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω–∫–µ"""
        if obj.image:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            border_style = 'border: 3px solid #28a745;' if obj.is_main else 'border: 1px solid #ddd;'
            
            # –°–æ–∑–¥–∞–µ–º –∑–≤–µ–∑–¥–æ—á–∫—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ
            star_html = format_html(
                '<span style="position: absolute; top: -5px; right: -5px; background: #28a745; color: white; border-radius: 50%; width: 18px; height: 18px; display: flex; align-items: center; justify-content: center; font-size: 10px; font-weight: bold;">‚òÖ</span>'
            ) if obj.is_main else format_html('')
            
            return format_html(
                '''
                <div style="position: relative;">
                    <a href="{}" target="_blank">
                        <img src="{}" alt="{}" 
                             style="width: 100px; height: 75px; object-fit: cover; border-radius: 4px; {}" />
                    </a>
                    {}
                    <div style="font-size: 10px; margin-top: 2px; color: #666;">
                        –ü–æ—Ä—è–¥–æ–∫: {} {}
                    </div>
                </div>
                ''',
                obj.image.url,
                obj.image.url,
                obj.title or '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
                border_style,
                star_html,
                obj.order,
                '| –ì–õ–ê–í–ù–û–ï' if obj.is_main else ''
            )
        return format_html('<div style="color: #999; font-style: italic;">–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>')
    image_preview.short_description = 'üì∑ –ü—Ä–µ–≤—å—é'
    
    class Meta:
        verbose_name = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
        verbose_name_plural = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'


class PropertyFeatureInline(admin.TabularInline):
    model = PropertyFeatureRelation
    extra = 1


class PropertyAdminForm(forms.ModelForm):
    """–§–æ—Ä–º–∞ –¥–ª—è Property —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –≤–∏–¥–∂–µ—Ç–∞–º–∏"""
    
    class Meta:
        model = Property
        fields = '__all__'
        widgets = {
            # –ü–æ–ª–µ description –∏—Å–ø–æ–ª—å–∑—É–µ—Ç TinyMCE
            'description': TinyMCE(attrs={'class': 'tinymce-content'}),
        }


@admin.register(Property)
class PropertyAdmin(BaseAdminWithRequiredFields):
    form = PropertyAdminForm
    list_display = ('legacy_id', 'title', 'property_type', 'district', 'deal_type', 'status', 
                   'price_sale_usd', 'special_offer', 'is_active', 'is_featured', 'views_count', 'created_at')
    list_filter = ('is_active', 'property_type', 'district', 'deal_type', 'status', 'is_featured', 'furnished')
    search_fields = ('legacy_id', 'title', 'description', 'address')
    prepopulated_fields = {'slug': ('title',)}
    inlines = [PropertyImageInline, PropertyFeatureInline]
    list_editable = ('is_active', 'is_featured', 'status')
    date_hierarchy = 'created_at'
    ordering = ('-created_at',)
    
    actions = ['make_active', 'make_inactive', 'make_featured', 'make_not_featured', 'auto_translate', 'force_retranslate']
    
    def make_active(self, request, queryset):
        """–°–¥–µ–ª–∞—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–π (–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π)"""
        updated = queryset.update(is_active=True)
        self.message_user(request, f'{updated} –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.')
    make_active.short_description = "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã"
    
    def make_inactive(self, request, queryset):
        """–°–Ω—è—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        updated = queryset.update(is_active=False)
        self.message_user(request, f'{updated} –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å–Ω—è—Ç–æ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.')
    make_inactive.short_description = "‚ùå –°–Ω—è—Ç—å —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã"
    
    def make_featured(self, request, queryset):
        """–°–¥–µ–ª–∞—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π"""
        updated = queryset.update(is_featured=True)
        self.message_user(request, f'{updated} –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ.')
    make_featured.short_description = "‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ"
    
    def make_not_featured(self, request, queryset):
        """–£–±—Ä–∞—Ç—å –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö"""
        updated = queryset.update(is_featured=False)
        self.message_user(request, f'{updated} –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —É–±—Ä–∞–Ω–æ –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö.')
    make_not_featured.short_description = "‚ö™ –£–±—Ä–∞—Ç—å –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö"
    
    def auto_translate(self, request, queryset):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏ —Ç–∞–π—Å–∫–∏–π (—Ç–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ –ø–æ–ª—è)"""
        from apps.core.services import translation_service
        
        if not translation_service.is_configured():
            self.message_user(request, 
                'API –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ GOOGLE_TRANSLATE_API_KEY –∏–ª–∏ DEEPL_API_KEY –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.', 
                level=messages.ERROR)
            return
        
        translated_count = 0
        skipped_count = 0
        
        for property_obj in queryset:
            try:
                translate_property(property_obj, force_retranslate=False)
                translated_count += 1
            except Exception as e:
                self.message_user(request, f'–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ–±—ä–µ–∫—Ç–∞ "{property_obj.title}": {e}', level=messages.ERROR)
                skipped_count += 1
        
        if translated_count > 0:
            service_name = translation_service.get_available_service()
            self.message_user(request, 
                f'–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {translated_count} –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ {service_name.upper()}. '
                f'–ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count} (—É–∂–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –∏–ª–∏ –æ—à–∏–±–∫–∏).')
        else:
            self.message_user(request, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.', level=messages.WARNING)
    
    auto_translate.short_description = "üåê –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ EN –∏ TH (—Ç–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ –ø–æ–ª—è)"
    
    def force_retranslate(self, request, queryset):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã"""
        from apps.core.services import translation_service
        
        if not translation_service.is_configured():
            self.message_user(request, 
                'API –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ GOOGLE_TRANSLATE_API_KEY –∏–ª–∏ DEEPL_API_KEY –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.', 
                level=messages.ERROR)
            return
        
        translated_count = 0
        
        for property_obj in queryset:
            try:
                translate_property(property_obj, force_retranslate=True)
                translated_count += 1
            except Exception as e:
                self.message_user(request, f'–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ–±—ä–µ–∫—Ç–∞ "{property_obj.title}": {e}', level=messages.ERROR)
        
        if translated_count > 0:
            service_name = translation_service.get_available_service()
            self.message_user(request, 
                f'–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {translated_count} –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ {service_name.upper()}.')
        else:
            self.message_user(request, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.', level=messages.WARNING)
    
    force_retranslate.short_description = "üîÑ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ (–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã)"
    
    def get_queryset(self, request):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º queryset –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"""
        return super().get_queryset(request).select_related('property_type', 'district')

    def bulk_image_upload_widget(self, obj=None):
        """–í–∏–¥–∂–µ—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        if obj and obj.pk:
            from django.urls import reverse
            from django.utils.safestring import mark_safe
            
            upload_url = reverse('properties:bulk_upload_images')
            
            html = f"""
            <div id="bulk-image-upload-section">
                <h3>üì∏ –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</h3>
                <div id="bulk-upload-area" style="border: 2px dashed #ccc; padding: 20px; text-align: center; margin: 15px 0; background: #f9f9f9;">
                    <input type="file" id="bulk-images-input" multiple accept="image/*" style="display: none;">
                    <div id="upload-prompt" onclick="document.getElementById('bulk-images-input').click();" style="cursor: pointer;">
                        <div style="font-size: 36px; margin-bottom: 10px;">üì∏</div>
                        <h4>–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å—Ä–∞–∑—É</h4>
                        <p>–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª—ã</p>
                        <p><small>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, GIF (–º–∞–∫—Å–∏–º—É–º 10MB –Ω–∞ —Ñ–∞–π–ª)</small></p>
                    </div>
                    <div id="selected-images-preview"></div>
                    <div id="upload-progress" style="display: none;">
                        <div style="background: #007cba; color: white; padding: 10px; margin: 10px 0; border-radius: 4px;">
                            <span id="progress-text">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                        </div>
                    </div>
                </div>
                <div style="text-align: center; margin: 15px 0;">
                    <button type="button" id="upload-selected-btn" onclick="uploadSelectedImages()" 
                            style="background: #007cba; color: white; border: none; padding: 12px 24px; border-radius: 4px; cursor: pointer; margin-right: 10px;">
                        üöÄ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    </button>
                    <button type="button" onclick="clearSelectedImages()" 
                            style="background: #666; color: white; border: none; padding: 12px 24px; border-radius: 4px; cursor: pointer;">
                        üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä
                    </button>
                </div>
            </div>
            
            <script>
                let selectedFiles = [];
                const uploadArea = document.getElementById('bulk-upload-area');
                const fileInput = document.getElementById('bulk-images-input');
                const previewArea = document.getElementById('selected-images-preview');
                const uploadBtn = document.getElementById('upload-selected-btn');
                
                // Drag & Drop —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
                uploadArea.addEventListener('dragover', function(e) {{
                    e.preventDefault();
                    this.style.borderColor = '#007cba';
                    this.style.backgroundColor = '#f0f8ff';
                }});
                
                uploadArea.addEventListener('dragleave', function(e) {{
                    e.preventDefault();
                    this.style.borderColor = '#ccc';
                    this.style.backgroundColor = '#f9f9f9';
                }});
                
                uploadArea.addEventListener('drop', function(e) {{
                    e.preventDefault();
                    this.style.borderColor = '#ccc';
                    this.style.backgroundColor = '#f9f9f9';
                    const files = Array.from(e.dataTransfer.files).filter(file => file.type.startsWith('image/'));
                    handleFileSelection(files);
                }});
                
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
                fileInput.addEventListener('change', function(e) {{
                    const files = Array.from(e.target.files);
                    handleFileSelection(files);
                }});
                
                function handleFileSelection(files) {{
                    selectedFiles = files;
                    displaySelectedImages();
                    uploadBtn.style.display = files.length > 0 ? 'inline-block' : 'none';
                }}
                
                function displaySelectedImages() {{
                    previewArea.innerHTML = '';
                    
                    if (selectedFiles.length > 0) {{
                        const header = document.createElement('h4');
                        header.textContent = `–í—ã–±—Ä–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${{selectedFiles.length}}`;
                        header.style.color = '#007cba';
                        previewArea.appendChild(header);
                        
                        const imageGrid = document.createElement('div');
                        imageGrid.style.display = 'grid';
                        imageGrid.style.gridTemplateColumns = 'repeat(auto-fill, minmax(120px, 1fr))';
                        imageGrid.style.gap = '10px';
                        imageGrid.style.marginTop = '15px';
                        
                        selectedFiles.forEach((file, index) => {{
                            const reader = new FileReader();
                            reader.onload = function(e) {{
                                const imageItem = document.createElement('div');
                                imageItem.style.border = '1px solid #ddd';
                                imageItem.style.borderRadius = '4px';
                                imageItem.style.padding = '8px';
                                imageItem.style.background = 'white';
                                imageItem.style.textAlign = 'center';
                                imageItem.innerHTML = `
                                    <img src="${{e.target.result}}" style="width: 100%; height: 80px; object-fit: cover; border-radius: 4px;">
                                    <div style="font-size: 10px; margin-top: 5px; word-break: break-all;">
                                        <strong>${{file.name.substring(0, 15)}}${{file.name.length > 15 ? '...' : ''}}</strong><br>
                                        ${{(file.size / 1024 / 1024).toFixed(1)}} MB
                                    </div>
                                    <button onclick="removeImage(${{index}})" 
                                            style="background: #dc3545; color: white; border: none; border-radius: 50%; width: 20px; height: 20px; cursor: pointer; margin-top: 5px;">√ó</button>
                                `;
                                imageGrid.appendChild(imageItem);
                            }};
                            reader.readAsDataURL(file);
                        }});
                        
                        previewArea.appendChild(imageGrid);
                    }}
                }}
                
                function removeImage(index) {{
                    selectedFiles.splice(index, 1);
                    displaySelectedImages();
                    uploadBtn.style.display = selectedFiles.length > 0 ? 'inline-block' : 'none';
                }}
                
                function clearSelectedImages() {{
                    selectedFiles = [];
                    fileInput.value = '';
                    displaySelectedImages();
                    uploadBtn.style.display = 'none';
                }}
                
                function uploadSelectedImages() {{
                    if (selectedFiles.length === 0) {{
                        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
                        return;
                    }}
                    
                    const formData = new FormData();
                    formData.append('property_id', '{obj.pk}');
                    
                    selectedFiles.forEach(file => {{
                        formData.append('images', file);
                    }});
                    
                    // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
                    document.getElementById('upload-progress').style.display = 'block';
                    document.getElementById('progress-text').textContent = `–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è ${{selectedFiles.length}} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...`;
                    uploadBtn.disabled = true;
                    
                    fetch('{upload_url}', {{
                        method: 'POST',
                        body: formData,
                        headers: {{
                            'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value
                        }}
                    }})
                    .then(response => response.json())
                    .then(data => {{
                        document.getElementById('upload-progress').style.display = 'none';
                        uploadBtn.disabled = false;
                        
                        if (data.success) {{
                            alert(`–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${{data.images.length}} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!`);
                            clearSelectedImages();
                            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ inline
                            location.reload();
                        }} else {{
                            alert(`–û—à–∏–±–∫–∞: ${{data.message}}`);
                        }}
                    }})
                    .catch(error => {{
                        document.getElementById('upload-progress').style.display = 'none';
                        uploadBtn.disabled = false;
                        console.error('Error:', error);
                        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
                    }});
                }}
            </script>
            """
            return mark_safe(html)
        else:
            return mark_safe('<p><em>–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.</em></p>')
    
    bulk_image_upload_widget.short_description = '–ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'

    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('title', 'slug', 'property_type', 'deal_type', 'status', 'is_featured', 'is_active')
        }),
        ('–û–ø–∏—Å–∞–Ω–∏–µ', {
            'fields': ('description', 'short_description', 'special_offer')
        }),
        ('–ü–µ—Ä–µ–≤–æ–¥—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', {
            'fields': ('special_offer_en', 'special_offer_th'),
            'classes': ('collapse',),
        }),
        ('–õ–æ–∫–∞—Ü–∏—è', {
            'fields': ('location', 'address', 'latitude', 'longitude')
        }),
        ('–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏', {
            'fields': ('bedrooms', 'bathrooms', 'area_total', 'area_living', 'area_land', 'floor', 'floors_total')
        }),
        ('–¶–µ–Ω—ã', {
            'fields': ('price_sale_usd', 'price_sale_thb', 'price_rent_monthly')
        }),
        ('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ', {
            'fields': ('developer', 'year_built', 'furnished', 'pool', 'parking', 'security', 'gym')
        }),
        ('SEO –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)', {
            'fields': (
                ('custom_title_ru', 'custom_title_en', 'custom_title_th'),
                ('custom_description_ru', 'custom_description_en', 'custom_description_th'),
                ('custom_keywords_ru', 'custom_keywords_en', 'custom_keywords_th'),
            ),
            'classes': ('collapse',),
            'description': '–û—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª—è –ø—É—Å—Ç—ã–º–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SEO –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–æ–≤'
        }),
    )

    # –î–æ–±–∞–≤–ª—è–µ–º readonly –ø–æ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞
    def get_readonly_fields(self, request, obj=None):
        """–î–æ–±–∞–≤–ª—è–µ–º readonly –ø–æ–ª–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        readonly_fields = list(super().get_readonly_fields(request, obj))
        if obj and obj.pk:
            readonly_fields.append('bulk_image_upload_widget')
        return readonly_fields
    
    def get_fieldsets(self, request, obj=None):
        """–î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é –º–∞—Å—Å–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞"""
        fieldsets = list(super().get_fieldsets(request, obj))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é –º–∞—Å—Å–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if obj and obj.pk:
            fieldsets.insert(-1, (
                '–ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π', {
                    'fields': ('bulk_image_upload_widget',),
                    'description': '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ'
                }
            ))
        
        return fieldsets


@admin.register(PropertyType)
class PropertyTypeAdmin(BaseAdminWithRequiredFields):
    list_display = ('name', 'name_display', 'icon')
    actions = ['auto_translate', 'force_retranslate']
    
    def auto_translate(self, request, queryset):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
        from apps.core.services import translation_service
        
        if not translation_service.is_configured():
            self.message_user(request, 
                'API –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ GOOGLE_TRANSLATE_API_KEY –∏–ª–∏ DEEPL_API_KEY –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.', 
                level=messages.ERROR)
            return
        
        translated_count = 0
        
        for obj in queryset:
            try:
                translate_property_type(obj, force_retranslate=False)
                translated_count += 1
            except Exception as e:
                self.message_user(request, f'–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–∏–ø–∞ "{obj.name_display}": {e}', level=messages.ERROR)
        
        if translated_count > 0:
            service_name = translation_service.get_available_service()
            self.message_user(request, f'–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {translated_count} —Ç–∏–ø–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ {service_name.upper()}.')
        else:
            self.message_user(request, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞.', level=messages.WARNING)
    
    auto_translate.short_description = "üåê –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ EN –∏ TH"
    
    def force_retranslate(self, request, queryset):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
        from apps.core.services import translation_service
        
        if not translation_service.is_configured():
            self.message_user(request, 
                'API –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ GOOGLE_TRANSLATE_API_KEY –∏–ª–∏ DEEPL_API_KEY –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.', 
                level=messages.ERROR)
            return
        
        translated_count = 0
        
        for obj in queryset:
            try:
                translate_property_type(obj, force_retranslate=True)
                translated_count += 1
            except Exception as e:
                self.message_user(request, f'–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–∏–ø–∞ "{obj.name_display}": {e}', level=messages.ERROR)
        
        if translated_count > 0:
            service_name = translation_service.get_available_service()
            self.message_user(request, f'–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {translated_count} —Ç–∏–ø–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ {service_name.upper()}.')
        else:
            self.message_user(request, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞.', level=messages.WARNING)
    
    force_retranslate.short_description = "üîÑ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ"


@admin.register(Developer)
class DeveloperAdmin(BaseAdminWithRequiredFields):
    list_display = ('name', 'website')
    prepopulated_fields = {'slug': ('name',)}
    actions = ['auto_translate', 'force_retranslate']
    
    def auto_translate(self, request, queryset):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤"""
        from apps.core.services import translation_service
        
        if not translation_service.is_configured():
            self.message_user(request, 
                'API –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ GOOGLE_TRANSLATE_API_KEY –∏–ª–∏ DEEPL_API_KEY –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.', 
                level=messages.ERROR)
            return
        
        translated_count = 0
        
        for obj in queryset:
            try:
                translate_developer(obj, force_retranslate=False)
                translated_count += 1
            except Exception as e:
                self.message_user(request, f'–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞ "{obj.name}": {e}', level=messages.ERROR)
        
        if translated_count > 0:
            service_name = translation_service.get_available_service()
            self.message_user(request, f'–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {translated_count} –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ —á–µ—Ä–µ–∑ {service_name.upper()}.')
        else:
            self.message_user(request, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞.', level=messages.WARNING)
    
    auto_translate.short_description = "üåê –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ EN –∏ TH"
    
    def force_retranslate(self, request, queryset):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤"""
        from apps.core.services import translation_service
        
        if not translation_service.is_configured():
            self.message_user(request, 
                'API –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ GOOGLE_TRANSLATE_API_KEY –∏–ª–∏ DEEPL_API_KEY –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.', 
                level=messages.ERROR)
            return
        
        translated_count = 0
        
        for obj in queryset:
            try:
                translate_developer(obj, force_retranslate=True)
                translated_count += 1
            except Exception as e:
                self.message_user(request, f'–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞ "{obj.name}": {e}', level=messages.ERROR)
        
        if translated_count > 0:
            service_name = translation_service.get_available_service()
            self.message_user(request, f'–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {translated_count} –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ —á–µ—Ä–µ–∑ {service_name.upper()}.')
        else:
            self.message_user(request, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞.', level=messages.WARNING)
    
    force_retranslate.short_description = "üîÑ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ"


@admin.register(PropertyFeature)
class PropertyFeatureAdmin(BaseAdminWithRequiredFields):
    list_display = ('name', 'icon')
    actions = ['auto_translate', 'force_retranslate']
    
    def auto_translate(self, request, queryset):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"""
        from apps.core.services import translation_service
        
        if not translation_service.is_configured():
            self.message_user(request, 
                'API –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ GOOGLE_TRANSLATE_API_KEY –∏–ª–∏ DEEPL_API_KEY –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.', 
                level=messages.ERROR)
            return
        
        translated_count = 0
        
        for obj in queryset:
            try:
                translate_property_feature(obj, force_retranslate=False)
                translated_count += 1
            except Exception as e:
                self.message_user(request, f'–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ "{obj.name}": {e}', level=messages.ERROR)
        
        if translated_count > 0:
            service_name = translation_service.get_available_service()
            self.message_user(request, f'–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {translated_count} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —á–µ—Ä–µ–∑ {service_name.upper()}.')
        else:
            self.message_user(request, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.', level=messages.WARNING)
    
    auto_translate.short_description = "üåê –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ EN –∏ TH"
    
    def force_retranslate(self, request, queryset):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"""
        from apps.core.services import translation_service
        
        if not translation_service.is_configured():
            self.message_user(request, 
                'API –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ GOOGLE_TRANSLATE_API_KEY –∏–ª–∏ DEEPL_API_KEY –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.', 
                level=messages.ERROR)
            return
        
        translated_count = 0
        
        for obj in queryset:
            try:
                translate_property_feature(obj, force_retranslate=True)
                translated_count += 1
            except Exception as e:
                self.message_user(request, f'–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ "{obj.name}": {e}', level=messages.ERROR)
        
        if translated_count > 0:
            service_name = translation_service.get_available_service()
            self.message_user(request, f'–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {translated_count} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —á–µ—Ä–µ–∑ {service_name.upper()}.')
        else:
            self.message_user(request, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.', level=messages.WARNING)
    
    force_retranslate.short_description = "üîÑ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ"