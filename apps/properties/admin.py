from django.contrib import admin
from django.contrib import messages
from django.http import HttpResponseRedirect
# from modeltranslation.admin import TranslationAdmin  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
from .models import (
    Property, PropertyImage, PropertyType, Developer,
    PropertyFeature, PropertyFeatureRelation
)
from .services import translate_property, translate_property_type, translate_developer, translate_property_feature


class PropertyImageInline(admin.TabularInline):
    model = PropertyImage
    extra = 1
    fields = ('image', 'title', 'is_main', 'order')


class PropertyFeatureInline(admin.TabularInline):
    model = PropertyFeatureRelation
    extra = 1


@admin.register(Property)
class PropertyAdmin(admin.ModelAdmin):
    list_display = ('legacy_id', 'title', 'property_type', 'district', 'deal_type', 'status', 
                   'price_sale_usd', 'is_active', 'is_featured', 'views_count', 'created_at')
    list_filter = ('is_active', 'property_type', 'district', 'deal_type', 'status', 'is_featured', 'furnished')
    search_fields = ('legacy_id', 'title', 'description', 'address')
    prepopulated_fields = {'slug': ('title',)}
    inlines = [PropertyImageInline, PropertyFeatureInline]
    list_editable = ('is_active', 'is_featured', 'status')
    date_hierarchy = 'created_at'
    ordering = ('-created_at',)
    
    actions = ['make_active', 'make_inactive', 'make_featured', 'make_not_featured', 'auto_translate', 'force_retranslate']
    
    def make_active(self, request, queryset):
        """–°–¥–µ–ª–∞—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–π (–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π)"""
        updated = queryset.update(is_active=True)
        self.message_user(request, f'{updated} –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.')
    make_active.short_description = "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã"
    
    def make_inactive(self, request, queryset):
        """–°–Ω—è—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        updated = queryset.update(is_active=False)
        self.message_user(request, f'{updated} –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å–Ω—è—Ç–æ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.')
    make_inactive.short_description = "‚ùå –°–Ω—è—Ç—å —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã"
    
    def make_featured(self, request, queryset):
        """–°–¥–µ–ª–∞—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π"""
        updated = queryset.update(is_featured=True)
        self.message_user(request, f'{updated} –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ.')
    make_featured.short_description = "‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ"
    
    def make_not_featured(self, request, queryset):
        """–£–±—Ä–∞—Ç—å –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö"""
        updated = queryset.update(is_featured=False)
        self.message_user(request, f'{updated} –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —É–±—Ä–∞–Ω–æ –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö.')
    make_not_featured.short_description = "‚ö™ –£–±—Ä–∞—Ç—å –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö"
    
    def auto_translate(self, request, queryset):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏ —Ç–∞–π—Å–∫–∏–π (—Ç–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ –ø–æ–ª—è)"""
        from apps.core.services import translation_service
        
        if not translation_service.is_configured():
            self.message_user(request, 
                'API –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ GOOGLE_TRANSLATE_API_KEY –∏–ª–∏ DEEPL_API_KEY –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.', 
                level=messages.ERROR)
            return
        
        translated_count = 0
        skipped_count = 0
        
        for property_obj in queryset:
            try:
                translate_property(property_obj, force_retranslate=False)
                translated_count += 1
            except Exception as e:
                self.message_user(request, f'–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ–±—ä–µ–∫—Ç–∞ "{property_obj.title}": {e}', level=messages.ERROR)
                skipped_count += 1
        
        if translated_count > 0:
            service_name = translation_service.get_available_service()
            self.message_user(request, 
                f'–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {translated_count} –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ {service_name.upper()}. '
                f'–ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count} (—É–∂–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –∏–ª–∏ –æ—à–∏–±–∫–∏).')
        else:
            self.message_user(request, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.', level=messages.WARNING)
    
    auto_translate.short_description = "üåê –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ EN –∏ TH (—Ç–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ –ø–æ–ª—è)"
    
    def force_retranslate(self, request, queryset):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã"""
        from apps.core.services import translation_service
        
        if not translation_service.is_configured():
            self.message_user(request, 
                'API –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ GOOGLE_TRANSLATE_API_KEY –∏–ª–∏ DEEPL_API_KEY –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.', 
                level=messages.ERROR)
            return
        
        translated_count = 0
        
        for property_obj in queryset:
            try:
                translate_property(property_obj, force_retranslate=True)
                translated_count += 1
            except Exception as e:
                self.message_user(request, f'–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ–±—ä–µ–∫—Ç–∞ "{property_obj.title}": {e}', level=messages.ERROR)
        
        if translated_count > 0:
            service_name = translation_service.get_available_service()
            self.message_user(request, 
                f'–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {translated_count} –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ {service_name.upper()}.')
        else:
            self.message_user(request, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.', level=messages.WARNING)
    
    force_retranslate.short_description = "üîÑ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ (–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã)"
    
    def get_queryset(self, request):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º queryset –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"""
        return super().get_queryset(request).select_related('property_type', 'district')

    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('title', 'slug', 'property_type', 'deal_type', 'status', 'is_featured', 'is_active')
        }),
        ('–û–ø–∏—Å–∞–Ω–∏–µ', {
            'fields': ('description', 'short_description')
        }),
        ('–õ–æ–∫–∞—Ü–∏—è', {
            'fields': ('location', 'address', 'latitude', 'longitude')
        }),
        ('–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏', {
            'fields': ('bedrooms', 'bathrooms', 'area_total', 'area_living', 'area_land', 'floor', 'floors_total')
        }),
        ('–¶–µ–Ω—ã', {
            'fields': ('price_sale_usd', 'price_sale_thb', 'price_rent_monthly')
        }),
        ('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ', {
            'fields': ('developer', 'year_built', 'furnished', 'pool', 'parking', 'security', 'gym')
        }),
        ('SEO –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)', {
            'fields': (
                ('custom_title_ru', 'custom_title_en', 'custom_title_th'),
                ('custom_description_ru', 'custom_description_en', 'custom_description_th'),
                ('custom_keywords_ru', 'custom_keywords_en', 'custom_keywords_th'),
            ),
            'classes': ('collapse',),
            'description': '–û—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª—è –ø—É—Å—Ç—ã–º–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SEO –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–æ–≤'
        }),
    )


@admin.register(PropertyType)
class PropertyTypeAdmin(admin.ModelAdmin):
    list_display = ('name', 'name_display', 'icon')
    actions = ['auto_translate', 'force_retranslate']
    
    def auto_translate(self, request, queryset):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
        from apps.core.services import translation_service
        
        if not translation_service.is_configured():
            self.message_user(request, 
                'API –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ GOOGLE_TRANSLATE_API_KEY –∏–ª–∏ DEEPL_API_KEY –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.', 
                level=messages.ERROR)
            return
        
        translated_count = 0
        
        for obj in queryset:
            try:
                translate_property_type(obj, force_retranslate=False)
                translated_count += 1
            except Exception as e:
                self.message_user(request, f'–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–∏–ø–∞ "{obj.name_display}": {e}', level=messages.ERROR)
        
        if translated_count > 0:
            service_name = translation_service.get_available_service()
            self.message_user(request, f'–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {translated_count} —Ç–∏–ø–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ {service_name.upper()}.')
        else:
            self.message_user(request, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞.', level=messages.WARNING)
    
    auto_translate.short_description = "üåê –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ EN –∏ TH"
    
    def force_retranslate(self, request, queryset):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
        from apps.core.services import translation_service
        
        if not translation_service.is_configured():
            self.message_user(request, 
                'API –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ GOOGLE_TRANSLATE_API_KEY –∏–ª–∏ DEEPL_API_KEY –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.', 
                level=messages.ERROR)
            return
        
        translated_count = 0
        
        for obj in queryset:
            try:
                translate_property_type(obj, force_retranslate=True)
                translated_count += 1
            except Exception as e:
                self.message_user(request, f'–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–∏–ø–∞ "{obj.name_display}": {e}', level=messages.ERROR)
        
        if translated_count > 0:
            service_name = translation_service.get_available_service()
            self.message_user(request, f'–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {translated_count} —Ç–∏–ø–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ {service_name.upper()}.')
        else:
            self.message_user(request, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞.', level=messages.WARNING)
    
    force_retranslate.short_description = "üîÑ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ"


@admin.register(Developer)
class DeveloperAdmin(admin.ModelAdmin):
    list_display = ('name', 'website')
    prepopulated_fields = {'slug': ('name',)}
    actions = ['auto_translate', 'force_retranslate']
    
    def auto_translate(self, request, queryset):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤"""
        from apps.core.services import translation_service
        
        if not translation_service.is_configured():
            self.message_user(request, 
                'API –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ GOOGLE_TRANSLATE_API_KEY –∏–ª–∏ DEEPL_API_KEY –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.', 
                level=messages.ERROR)
            return
        
        translated_count = 0
        
        for obj in queryset:
            try:
                translate_developer(obj, force_retranslate=False)
                translated_count += 1
            except Exception as e:
                self.message_user(request, f'–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞ "{obj.name}": {e}', level=messages.ERROR)
        
        if translated_count > 0:
            service_name = translation_service.get_available_service()
            self.message_user(request, f'–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {translated_count} –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ —á–µ—Ä–µ–∑ {service_name.upper()}.')
        else:
            self.message_user(request, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞.', level=messages.WARNING)
    
    auto_translate.short_description = "üåê –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ EN –∏ TH"
    
    def force_retranslate(self, request, queryset):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤"""
        from apps.core.services import translation_service
        
        if not translation_service.is_configured():
            self.message_user(request, 
                'API –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ GOOGLE_TRANSLATE_API_KEY –∏–ª–∏ DEEPL_API_KEY –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.', 
                level=messages.ERROR)
            return
        
        translated_count = 0
        
        for obj in queryset:
            try:
                translate_developer(obj, force_retranslate=True)
                translated_count += 1
            except Exception as e:
                self.message_user(request, f'–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞ "{obj.name}": {e}', level=messages.ERROR)
        
        if translated_count > 0:
            service_name = translation_service.get_available_service()
            self.message_user(request, f'–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {translated_count} –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ —á–µ—Ä–µ–∑ {service_name.upper()}.')
        else:
            self.message_user(request, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞.', level=messages.WARNING)
    
    force_retranslate.short_description = "üîÑ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ"


@admin.register(PropertyFeature)
class PropertyFeatureAdmin(admin.ModelAdmin):
    list_display = ('name', 'icon')
    actions = ['auto_translate', 'force_retranslate']
    
    def auto_translate(self, request, queryset):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"""
        from apps.core.services import translation_service
        
        if not translation_service.is_configured():
            self.message_user(request, 
                'API –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ GOOGLE_TRANSLATE_API_KEY –∏–ª–∏ DEEPL_API_KEY –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.', 
                level=messages.ERROR)
            return
        
        translated_count = 0
        
        for obj in queryset:
            try:
                translate_property_feature(obj, force_retranslate=False)
                translated_count += 1
            except Exception as e:
                self.message_user(request, f'–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ "{obj.name}": {e}', level=messages.ERROR)
        
        if translated_count > 0:
            service_name = translation_service.get_available_service()
            self.message_user(request, f'–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {translated_count} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —á–µ—Ä–µ–∑ {service_name.upper()}.')
        else:
            self.message_user(request, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.', level=messages.WARNING)
    
    auto_translate.short_description = "üåê –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ EN –∏ TH"
    
    def force_retranslate(self, request, queryset):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"""
        from apps.core.services import translation_service
        
        if not translation_service.is_configured():
            self.message_user(request, 
                'API –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ GOOGLE_TRANSLATE_API_KEY –∏–ª–∏ DEEPL_API_KEY –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.', 
                level=messages.ERROR)
            return
        
        translated_count = 0
        
        for obj in queryset:
            try:
                translate_property_feature(obj, force_retranslate=True)
                translated_count += 1
            except Exception as e:
                self.message_user(request, f'–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ "{obj.name}": {e}', level=messages.ERROR)
        
        if translated_count > 0:
            service_name = translation_service.get_available_service()
            self.message_user(request, f'–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {translated_count} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —á–µ—Ä–µ–∑ {service_name.upper()}.')
        else:
            self.message_user(request, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.', level=messages.WARNING)
    
    force_retranslate.short_description = "üîÑ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ"