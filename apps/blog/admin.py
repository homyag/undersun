from django.contrib import admin
from django.utils.html import format_html
from django.utils.translation import gettext_lazy as _
from django.contrib import messages
from django.http import HttpResponseRedirect
from django import forms
from tinymce.widgets import TinyMCE
# from modeltranslation.admin import TranslationAdmin, TranslationTabularInline
from .models import BlogCategory, BlogPost, BlogTag
from .services import translate_blog_post, translate_blog_category


@admin.register(BlogCategory)
class BlogCategoryAdmin(admin.ModelAdmin):
    list_display = ('name', 'slug', 'color_preview', 'is_active', 'order', 'posts_count')
    list_filter = ('is_active',)
    search_fields = ('name', 'description')
    prepopulated_fields = {'slug': ('name',)}
    ordering = ('order', 'name')
    
    def color_preview(self, obj):
        return format_html(
            '<div style="width: 20px; height: 20px; background-color: {}; border: 1px solid #ccc; border-radius: 3px;"></div>',
            obj.color
        )
    color_preview.short_description = _('–¶–≤–µ—Ç')
    
    def posts_count(self, obj):
        return obj.posts.count()
    posts_count.short_description = _('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π')


class BlogTagInline(admin.TabularInline):
    model = BlogTag.posts.through
    extra = 1


class BlogPostAdminForm(forms.ModelForm):
    """–§–æ—Ä–º–∞ –¥–ª—è BlogPost —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –≤–∏–¥–∂–µ—Ç–∞–º–∏"""
    
    class Meta:
        model = BlogPost
        fields = '__all__'
        widgets = {
            # –¢–æ–ª—å–∫–æ –ø–æ–ª—è content –∏—Å–ø–æ–ª—å–∑—É—é—Ç TinyMCE
            'content': TinyMCE(attrs={'class': 'tinymce-content'}),
            'content_en': TinyMCE(attrs={'class': 'tinymce-content'}),
            'content_th': TinyMCE(attrs={'class': 'tinymce-content'}),
        }


@admin.register(BlogPost)
class BlogPostAdmin(admin.ModelAdmin):
    form = BlogPostAdminForm
    list_display = ('title', 'slug', 'category', 'author', 'status', 'is_featured', 'published_at', 'views_count')
    list_filter = ('status', 'is_featured', 'category', 'created_at', 'published_at')
    search_fields = ('title', 'excerpt', 'content')
    prepopulated_fields = {'slug': ('title',)}
    date_hierarchy = 'published_at'
    ordering = ('-created_at',)
    
    fieldsets = (
        (_('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–†—É—Å—Å–∫–∏–π)'), {
            'fields': ('title', 'slug', 'excerpt', 'content', 'category', 'author')
        }),
        (_('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–±—ã—Ç–∏–π'), {
            'fields': ('event_date', 'event_location', 'event_price'),
            'classes': ('collapse',),
            'description': _('–ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π')
        }),
        (_('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∫–µ–π—Å–æ–≤ –∏ –æ–±–∑–æ—Ä–æ–≤'), {
            'fields': ('project_url', 'rating'),
            'classes': ('collapse',),
            'description': _('–ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–ª—è –∫–µ–π—Å–æ–≤ (—Å—Å—ã–ª–∫–∞) –∏ –æ–±–∑–æ—Ä–æ–≤ (—Ä–µ–π—Ç–∏–Ω–≥ 1-5)')
        }),
        (_('–ü–æ–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏'), {
            'fields': ('original_url', 'original_id'),
            'classes': ('collapse',),
            'description': _('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ')
        }),
        (_('–ü–µ—Ä–µ–≤–æ–¥—ã - English'), {
            'fields': ('title_en', 'excerpt_en', 'content_en'),
            'classes': ('collapse',)
        }),
        (_('–ü–µ—Ä–µ–≤–æ–¥—ã - ‡πÑ‡∏ó‡∏¢'), {
            'fields': ('title_th', 'excerpt_th', 'content_th'),
            'classes': ('collapse',)
        }),
        (_('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'), {
            'fields': ('featured_image', 'featured_image_alt', 'featured_image_alt_en', 'featured_image_alt_th'),
            'classes': ('collapse',)
        }),
        (_('SEO - –†—É—Å—Å–∫–∏–π'), {
            'fields': ('meta_title', 'meta_description', 'meta_keywords'),
            'classes': ('collapse',)
        }),
        (_('SEO - English'), {
            'fields': ('meta_title_en', 'meta_description_en', 'meta_keywords_en'),
            'classes': ('collapse',)
        }),
        (_('SEO - ‡πÑ‡∏ó‡∏¢'), {
            'fields': ('meta_title_th', 'meta_description_th', 'meta_keywords_th'),
            'classes': ('collapse',)
        }),
        (_('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'), {
            'fields': ('status', 'is_featured', 'allow_comments', 'published_at')
        }),
    )
    
    readonly_fields = ('views_count',)
    
    
    def save_model(self, request, obj, form, change):
        if not change:  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
            obj.author = request.user
        super().save_model(request, obj, form, change)
    
    def get_queryset(self, request):
        qs = super().get_queryset(request)
        return qs.select_related('category', 'author')
    
    actions = ['make_published', 'make_draft', 'make_featured', 'auto_translate', 'force_retranslate']
    
    def make_published(self, request, queryset):
        updated = queryset.update(status='published')
        self.message_user(request, f'{updated} —Å—Ç–∞—Ç–µ–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.')
    make_published.short_description = _('–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏')
    
    def make_draft(self, request, queryset):
        updated = queryset.update(status='draft')
        self.message_user(request, f'{updated} —Å—Ç–∞—Ç–µ–π –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–∏.')
    make_draft.short_description = _('–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–∏')
    
    def make_featured(self, request, queryset):
        updated = queryset.update(is_featured=True)
        self.message_user(request, f'{updated} —Å—Ç–∞—Ç–µ–π –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ.')
    make_featured.short_description = _('–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ')
    
    def auto_translate(self, request, queryset):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏ —Ç–∞–π—Å–∫–∏–π (—Ç–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ –ø–æ–ª—è)"""
        from apps.core.services import translation_service
        
        if not translation_service.is_configured():
            self.message_user(request, 
                'API –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ GOOGLE_TRANSLATE_API_KEY –∏–ª–∏ DEEPL_API_KEY –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.', 
                level=messages.ERROR)
            return
        
        translated_count = 0
        skipped_count = 0
        
        for post in queryset:
            try:
                translate_blog_post(post, force_retranslate=False)
                translated_count += 1
            except Exception as e:
                self.message_user(request, f'–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç–∞—Ç—å–∏ "{post.title}": {e}', level=messages.ERROR)
                skipped_count += 1
        
        if translated_count > 0:
            service_name = translation_service.get_available_service()
            self.message_user(request, 
                f'–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {translated_count} —Å—Ç–∞—Ç–µ–π —á–µ—Ä–µ–∑ {service_name.upper()}. '
                f'–ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count} (—É–∂–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –∏–ª–∏ –æ—à–∏–±–∫–∏).')
        else:
            self.message_user(request, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç–∞—Ç—å–∏.', level=messages.WARNING)
    
    auto_translate.short_description = _('üåê –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ EN –∏ TH (—Ç–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ –ø–æ–ª—è)')
    
    def force_retranslate(self, request, queryset):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏, –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã"""
        from apps.core.services import translation_service
        
        if not translation_service.is_configured():
            self.message_user(request, 
                'API –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ GOOGLE_TRANSLATE_API_KEY –∏–ª–∏ DEEPL_API_KEY –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.', 
                level=messages.ERROR)
            return
        
        translated_count = 0
        
        for post in queryset:
            try:
                translate_blog_post(post, force_retranslate=True)
                translated_count += 1
            except Exception as e:
                self.message_user(request, f'–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç–∞—Ç—å–∏ "{post.title}": {e}', level=messages.ERROR)
        
        if translated_count > 0:
            service_name = translation_service.get_available_service()
            self.message_user(request, 
                f'–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {translated_count} —Å—Ç–∞—Ç–µ–π —á–µ—Ä–µ–∑ {service_name.upper()}.')
        else:
            self.message_user(request, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç–∞—Ç—å–∏.', level=messages.WARNING)
    
    force_retranslate.short_description = _('üîÑ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ (–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã)')
    
    def get_urls(self):
        """–î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ URL –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤"""
        from django.urls import path
        urls = super().get_urls()
        custom_urls = [
            path('<int:object_id>/translate/', self.admin_site.admin_view(self.translate_single_post), name='blog_blogpost_translate'),
        ]
        return custom_urls + urls
    
    def translate_single_post(self, request, object_id):
        """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç—å—é"""
        from apps.core.services import translation_service
        
        try:
            post = BlogPost.objects.get(pk=object_id)
            
            if not translation_service.is_configured():
                messages.error(request, 
                    'API –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ GOOGLE_TRANSLATE_API_KEY –∏–ª–∏ DEEPL_API_KEY –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.')
                return HttpResponseRedirect(f"/admin/blog/blogpost/{object_id}/change/")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä force –∏–∑ GET-–∑–∞–ø—Ä–æ—Å–∞
            force_retranslate = request.GET.get('force', 'false').lower() == 'true'
            
            translate_blog_post(post, force_retranslate=force_retranslate)
            
            service_name = translation_service.get_available_service()
            action_text = "–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –∑–∞–Ω–æ–≤–æ" if force_retranslate else "–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞"
            messages.success(request, 
                f'–°—Ç–∞—Ç—å—è "{post.title}" —É—Å–ø–µ—à–Ω–æ {action_text} —á–µ—Ä–µ–∑ {service_name.upper()}.')
                
        except BlogPost.DoesNotExist:
            messages.error(request, '–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
        except Exception as e:
            messages.error(request, f'–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}')
        
        return HttpResponseRedirect(f"/admin/blog/blogpost/{object_id}/change/")
    
    def change_view(self, request, object_id, form_url='', extra_context=None):
        """–î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        extra_context = extra_context or {}
        if object_id:
            extra_context['show_translate_button'] = True
            extra_context['translate_url'] = f"/admin/blog/blogpost/{object_id}/translate/"
        return super().change_view(request, object_id, form_url, extra_context)


@admin.register(BlogTag)
class BlogTagAdmin(admin.ModelAdmin):
    list_display = ('name', 'slug', 'posts_count', 'created_at')
    search_fields = ('name',)
    prepopulated_fields = {'slug': ('name',)}
    
    def posts_count(self, obj):
        return obj.posts.count()
    posts_count.short_description = _('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π')
